diff --git a/configure.ac b/configure.ac
index 2b19d64..2b474d7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -93,6 +93,12 @@ if test `echo "$BOXTYPE" | cut -b 1-2` == "vu"; then
 	AC_DEFINE(FORCE_ADVANCED_REMOTE, 1,[define to fixup the input device identification when the remote control is actually an 'advanced' remote (with play/forward/rewind keys)])
 fi
 
+if test "$BOXTYPE" == "sf8008"; then
+	AC_DEFINE(HAVE_HISILICON, 1,[define add HISILICON chip])
+	AC_DEFINE(CONFIG_HISILICON_FB, 1,[define add HISILICON framebuffer blit])
+	AC_DEFINE(FORCE_ALPHABLENDING_ACCELERATION, 1,[define when the framebuffer acceleration has alphablending support, but detection slow down all])
+fi
+
 AC_ARG_WITH(libsdl,
 	AS_HELP_STRING([--with-libsdl],[use libsdl, yes or no]),
 	[with_libsdl=$withval],[with_libsdl=no])
diff --git a/lib/dvb/decoder.cpp b/lib/dvb/decoder.cpp
index df12731..cb7c89c 100644
--- a/lib/dvb/decoder.cpp
+++ b/lib/dvb/decoder.cpp
@@ -1237,6 +1237,10 @@ RESULT eTSMPEGDecoder::showSinglePic(const char *filename)
 			fstat(f, &s);
 			if (m_video_clip_fd == -1)
 				m_video_clip_fd = open("/dev/dvb/adapter0/video0", O_WRONLY);
+#if HAVE_HISILICON
+			if (m_video_clip_fd >= 0)
+				finishShowSinglePic();
+#endif
 			if (m_video_clip_fd >= 0)
 			{
 				bool seq_end_avail = false;
@@ -1253,8 +1257,13 @@ RESULT eTSMPEGDecoder::showSinglePic(const char *filename)
 				else
 					streamtype = VIDEO_STREAMTYPE_MPEG2;
 
+#if HAVE_HISILICON
+				if (ioctl(m_video_clip_fd, VIDEO_SELECT_SOURCE, 0xff) < 0)
+					eDebug("[eTSMPEGDecoder] VIDEO_SELECT_SOURCE MEMORY failed: %m");
+#else
 				if (ioctl(m_video_clip_fd, VIDEO_SELECT_SOURCE, VIDEO_SOURCE_MEMORY) < 0)
 					eDebug("[eTSMPEGDecoder] VIDEO_SELECT_SOURCE MEMORY failed: %m");
+#endif
 				if (ioctl(m_video_clip_fd, VIDEO_SET_STREAMTYPE, streamtype) < 0)
 					eDebug("[eTSMPEGDecoder] VIDEO_SET_STREAMTYPE failed: %m");
 				if (ioctl(m_video_clip_fd, VIDEO_PLAY) < 0)
@@ -1273,7 +1282,11 @@ RESULT eTSMPEGDecoder::showSinglePic(const char *filename)
 				if (!seq_end_avail)
 					write(m_video_clip_fd, seq_end, sizeof(seq_end));
 				writeAll(m_video_clip_fd, stuffing, 8192);
+#if HAVE_HISILICON
+				;
+#else
 				m_showSinglePicTimer->start(150, true);
+#endif
 			}
 			close(f);
 		}
diff --git a/lib/dvb/demux.cpp b/lib/dvb/demux.cpp
index 44dc2ee..0631c5f 100644
--- a/lib/dvb/demux.cpp
+++ b/lib/dvb/demux.cpp
@@ -741,7 +741,11 @@ RESULT eDVBTSRecorder::start()
 	char filename[128];
 	snprintf(filename, 128, "/dev/dvb/adapter%d/demux%d", m_demux->adapter, m_demux->demux);
 
+#if HAVE_HISILICON
+	m_source_fd = ::open(filename, O_RDONLY | O_CLOEXEC | O_NONBLOCK);
+#else
 	m_source_fd = ::open(filename, O_RDONLY | O_CLOEXEC);
+#endif
 
 	if (m_source_fd < 0)
 	{
diff --git a/lib/dvb/filepush.cpp b/lib/dvb/filepush.cpp
index b91ab0e..f29f8af 100644
--- a/lib/dvb/filepush.cpp
+++ b/lib/dvb/filepush.cpp
@@ -102,7 +102,12 @@ void eFilePushThread::thread()
 				break;
 			}
 			if (errno == EINTR || errno == EBUSY || errno == EAGAIN)
+			{
+#if HAVE_HISILICON
+				usleep(100000);
+#endif
 				continue;
+			}
 			if (errno == EOVERFLOW)
 			{
 				eWarning("[eFilePushThread] OVERFLOW while playback?");
@@ -182,7 +187,12 @@ void eFilePushThread::thread()
 						break;
 					}
 					if (w < 0 && (errno == EINTR || errno == EAGAIN || errno == EBUSY))
+					{
+#if HAVE_HISILICON
+						usleep(100000);
+#endif
 						continue;
+					}
 					eDebug("[eFilePushThread] write: %m");
 					sendEvent(evtWriteError);
 					break;
diff --git a/lib/gdi/gfbdc.cpp b/lib/gdi/gfbdc.cpp
index 588e572..f86d7ab 100644
--- a/lib/gdi/gfbdc.cpp
+++ b/lib/gdi/gfbdc.cpp
@@ -7,6 +7,17 @@
 
 #include <time.h>
 
+#if defined(CONFIG_HISILICON_FB)
+#include <lib/gdi/grc.h>
+
+extern void bcm_accel_blit(
+		int src_addr, int src_width, int src_height, int src_stride, int src_format,
+		int dst_addr, int dst_width, int dst_height, int dst_stride,
+		int src_x, int src_y, int width, int height,
+		int dst_x, int dst_y, int dwidth, int dheight,
+		int pal_addr, int flags);
+#endif
+
 gFBDC::gFBDC()
 {
 	fb=new fbClass;
@@ -143,7 +154,17 @@ void gFBDC::exec(const gOpcode *o)
 		break;
 	}
 	case gOpcode::flush:
-		fb->blit();
+#if defined(CONFIG_HISILICON_FB)
+		if(islocked()==0)
+		{
+			bcm_accel_blit(
+				surface.data_phys, surface.x, surface.y, surface.stride, 0,
+				surface_back.data_phys, surface_back.x, surface_back.y, surface_back.stride,
+				0, 0, surface.x, surface.y,
+				0, 0, surface.x, surface.y,
+				0, 0);
+		}
+#endif
 		break;
 	default:
 		gDC::exec(o);
@@ -177,12 +198,14 @@ void gFBDC::setGamma(int g)
 
 void gFBDC::setResolution(int xres, int yres, int bpp)
 {
-	if (m_pixmap && (surface.x == xres) && (surface.y == yres) && (surface.bpp == bpp))
+	if (m_pixmap && (surface.x == xres) && (surface.y == yres) && (surface.bpp == bpp)
+	#if defined(CONFIG_HISILICON_FB)
+		&& islocked()==0
+	#endif
+		)
 		return;
-
 	if (gAccel::getInstance())
 		gAccel::getInstance()->releaseAccelMemorySpace();
-
 	fb->SetMode(xres, yres, bpp);
 
 	surface.x = xres;
@@ -192,6 +215,9 @@ void gFBDC::setResolution(int xres, int yres, int bpp)
 	surface.stride = fb->Stride();
 	surface.data = fb->lfb;
 
+	for (int y=0; y<yres; y++)	// make whole screen transparent
+		memset(fb->lfb+ y * xres * 4, 0x00, xres * 4);
+
 	surface.data_phys = fb->getPhysAddr();
 
 	int fb_size = surface.stride * surface.y;
@@ -224,6 +250,15 @@ void gFBDC::setResolution(int xres, int yres, int bpp)
 
 	surface_back.clut = surface.clut;
 
+#if defined(CONFIG_HISILICON_FB)
+	if(islocked()==0)
+	{
+		gUnmanagedSurface s(surface);
+		surface = surface_back;
+		surface_back = s;
+	}
+#endif
+
 	m_pixmap = new gPixmap(&surface);
 }
 
